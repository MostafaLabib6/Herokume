using Herokume.Application.Contracts.Infrastrcture.EmailService;
using Herokume.Application.Contracts.Infrastrcture.IdentityService;
using Herokume.Application.Contracts.Infrastrcture.PhotoService;
using Herokume.Application.Models.Mail;
using Herokume.Application.Models.Photo;
using Herokume.Infrastrcture.Authentication;
using Herokume.Infrastrcture.Mail;
using Herokume.Infrastrcture.Photo;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using System.Text;

namespace Herokume.Infrastrcture;

public static class InfrastructureServiceRegistration
{
    public static IServiceCollection AddInfrastructureService(this IServiceCollection services, IConfiguration configuration)
    {
        services.AddTransient<IUserService, UserService>();

        services.AddDbContext<HerokumeIdentityDbContext>(options =>
              options.UseSqlServer(configuration.GetConnectionString("HerokumeConnectionIdentityString")));

        services.Configure<EmailSetting>(configuration.GetSection("EmailSettings"));
        services.AddTransient<IEmailService, EmailService>();

        services.Configure<PhotoSettings>(configuration.GetSection("CloudinarySettings"));
        services.AddTransient<IPhotoService, PhotoService>();

        services.AddIdentity<ApplicationUser, IdentityRole>().
            AddEntityFrameworkStores<HerokumeIdentityDbContext>().
            AddDefaultTokenProviders();

        //services.AddTransient<IAuthenticationService, AuthenticationService>();

        services.AddAuthentication(options =>
        {
            options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
            options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
        }).AddJwtBearer(options =>
        {
            var key = Encoding.ASCII.GetBytes(configuration.GetSection("JwtConfig:SecurityKey").Value ?? throw new ArgumentNullException());

            // user just authenticate once and the the token will added to header automaticaly.
            options.SaveToken = true;
            // to make sure that the token is generated by app not any random token
            options.TokenValidationParameters = new TokenValidationParameters()
            {
                ValidateIssuerSigningKey = true,

                // didn't provide the key to authenticate that the was the error .
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(
                    configuration.GetSection("JwtConfig:SecurityKey").Value ?? throw new ArgumentNullException())),
                ValidateIssuer = true,
                ValidateAudience = true,
                RequireExpirationTime = false,
                ValidateLifetime = true,
                ValidIssuer = configuration.GetSection("JwtConfig:Issuer").Value,
                ValidAudience = configuration.GetSection("JwtConfig:Audience").Value,
            };
        });

        return services;
    }
}
